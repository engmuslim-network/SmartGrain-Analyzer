import cv2
import numpy as np
from tkinter import Tk, Label, Button, filedialog, messagebox, Frame, Canvas
from PIL import Image, ImageTk

class RiceAnalyzerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("🌾 Rice Quality  Analyzer 🌾")
        self.root.geometry("900x850")
        self.root.configure(bg="#f0f4f7")

        
        header_frame = Frame(self.root, bg="#ffffff", height=80)
        header_frame.pack(fill="x")

        header_label = Label(header_frame, text="🌾 Rice Quality  Analyzer 🌾",
                             font=("Helvetica", 28, "bold"), bg="#ffffff", fg="#2d3b55")
        header_label.pack(pady=20)

        
        self.canvas = Canvas(self.root, width=600, height=450, bg="#ffffff", highlightthickness=1, highlightbackground="#ccc")
        self.canvas.pack(pady=30)

        
        self.btn_upload = Button(self.root, text="📤 Upload Rice Image", command=self.upload_image,
                                 bg="#2d3b55", fg="white", font=("Arial", 16, "bold"),
                                 padx=20, pady=10, relief="flat", activebackground="#4caf50", width=25)
        self.btn_upload.pack(pady=10)

        
        self.result_frame = Frame(self.root, bg="#e8f5e9", bd=2, relief="groove")
        self.result_frame.pack(pady=20, ipadx=20, ipady=10)

        self.label_result = Label(self.result_frame, text="Upload an image to analyze.",
                                  font=("Arial", 16), bg="#f5f5f5", fg="#333", justify="left")
        self.label_result.pack()

    def upload_image(self):
        file_path = filedialog.askopenfilename(
            filetypes=[("Image files", "*.jpg *.png *.jpeg *.bmp")]
        )
        if not file_path:
            messagebox.showinfo("⚠️ Warning", "Please select an image.")
            return

        result_img, rice_count, impurity_count, impurity_percent = self.process_image(file_path)

        if result_img is None:
            messagebox.showerror("❌ Error", "Something went wrong while processing the image.")
            return

        
        result_bgr = cv2.cvtColor(result_img, cv2.COLOR_BGR2RGB)
        result_pil = Image.fromarray(result_bgr)
        result_pil = result_pil.resize((600, 450))
        self.img_tk = ImageTk.PhotoImage(result_pil)
        self.canvas.create_image(0, 0, anchor="nw", image=self.img_tk)

        
        self.label_result.config(
            text=f"✅ Rice Count: {rice_count}\n"
                 f"⚠️ Impurity Count: {impurity_count}\n"
                 f"📊 Impurity Percentage: {impurity_percent:.2f}%"
        )

    def process_image(self, image_path):
        try:
            image = cv2.imread(image_path)
            output = image.copy()
            hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

            kernel = np.ones((3, 3), np.uint8)

            
            lower_orange = np.array([5, 100, 100])
            upper_orange = np.array([20, 255, 255])
            orange_mask = cv2.inRange(hsv, lower_orange, upper_orange)

           
            lower_green = np.array([40, 40, 40])
            upper_green = np.array([80, 255, 255])
            green_mask = cv2.inRange(hsv, lower_green, upper_green)

            
            lower_blue = np.array([90, 50, 50])
            upper_blue = np.array([130, 255, 255])
            blue_mask = cv2.inRange(hsv, lower_blue, upper_blue)

            
            impurity_mask = cv2.bitwise_or(orange_mask, green_mask)
            impurity_mask = cv2.bitwise_or(impurity_mask, blue_mask)

            
            impurity_mask = cv2.morphologyEx(impurity_mask, cv2.MORPH_OPEN, kernel, iterations=2)
            contours_impurity, _ = cv2.findContours(impurity_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            impurity_count = 0
            for cnt in contours_impurity:
                area = cv2.contourArea(cnt)
                if area > 30:
                    impurity_count += 1
                    cv2.drawContours(output, [cnt], -1, (0, 0, 255), 2)  # Red border for all impurities

            
            rice_mask = cv2.bitwise_not(impurity_mask)
            gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
            blurred = cv2.GaussianBlur(gray, (5, 5), 0)

            thresh = cv2.adaptiveThreshold(
                blurred, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                cv2.THRESH_BINARY_INV, 11, 2
            )
            thresh = cv2.bitwise_and(thresh, thresh, mask=rice_mask)
            thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=2)

            contours_rice, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
            rice_count = 0
            for cnt in contours_rice:
                area = cv2.contourArea(cnt)
                if area < 100:
                    continue
                x, y, w, h = cv2.boundingRect(cnt)
                aspect_ratio = float(w) / h if h != 0 else 0
                if 0.2 < aspect_ratio < 0.9:
                    rice_count += 1
                    cv2.drawContours(output, [cnt], -1, (0, 255, 0), 2)  

            total = rice_count + impurity_count
            impurity_percent = (impurity_count / total) * 100 if total > 0 else 0

            return output, rice_count, impurity_count, impurity_percent

        except Exception as e:
            print("Error:", e)
            return None, 0, 0, 0


if __name__ == "__main__":
    root = Tk()
    app = RiceAnalyzerApp(root)
    root.mainloop()
